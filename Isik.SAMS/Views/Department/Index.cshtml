@using GridMvc.Html
@using Isik.SAMS.Models.Entity

@model IEnumerable<SAMS_Department>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";

    if (Session["UserId"] != null && Session["AdminId"] == null)
    {
        Response.Redirect("/Home/Index");
    }
    else if (Session["UserId"] == null && Session["AdminId"] == null)
    {
        Response.Redirect("/Login/Index");
    }
}

@if (ViewBag.Message != null)
{
    <div class="col-12">
        <div class="pull-right">
            <div class="alert @ViewBag.MessageClass alert-dismissible fade show pull-right" role="alert">
                <b>@ViewBag.Message </b>
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        </div>
    </div>
}


<div class="col-12">
    <div class="statbox widget box box-shadow">
        <div class="widget-header">
            <div class="row">
                <div class="col-xl-8 col-md-8 col-sm-8 col-8">
                    <h4>Department List</h4>
                </div>
                <div class="col-xl-4 col-md-4 col-sm-4 col-4">
                    <a class="btn btn-primary btn-sm pull-right ml-1" data-task="Insert" data-method="GET" data-toggle="modal" data-href="@Url.Action("Insert","Department")">
                        <i class="icon-plus-circle"></i> Create New Department
                    </a>
                </div>
            </div>
        </div>
        <div class="widget-content widget-content-area">
            @Html.Grid(Model).Columns(columns =>
       {
       columns.Add(c => c.DepartmentName).Titled("Department Name");
       columns.Add()
           .Titled("")
           .Filterable(true)
           .Sanitized(false)
           .Encoded(false)
           .RenderValueAs(c => @<text><a class="icon-trash-1" onclick="deleteTask('@(c.Id)')"></a> <a style="margin-left:15px;" class="icon-edit" data-task="Insert" data-method="GET" data-href="@Url.Action("Update","Department", new { id = c.Id})"></a></text>);
    @*columns.Add()
        .Titled("")
        .Filterable(true)
        .Sanitized(false)
        .Encoded(false)
        .RenderValueAs(c => @<text><a class="icon-edit" data-task="Insert" data-method="GET" data-href="@Url.Action("Update","Department", new { id = c.Id})"></a></text>);*@


}).WithPaging(25).Sortable(true).EmptyText("There is no data available.")
        </div>
    </div>
</div>

<script src="/Assets/lib/sweetalerts/sweetalert.js"></script>
<script type="text/javascript">
    function deleteTask(id) {
        swal({
            title: "Are you sure?",
            text: "Are you sure that you want to delete this Program?",
            type: "warning",
            showCancelButton: true,
            confirmButtonText: "Yes, delete it!",
            confirmButtonColor: "#ec6c62"
        }).then((result) => {
            if (result) {
                $.ajax({
                    dataType: 'JSON',
                    type: 'POST',
                    async: false,
                    timeout: 600000,
                    url: "/Department/Delete?id=" + id,
                    success: function () {
                        showDeleteMessage();
                        location.reload(true);

                    },
                    error: function () {
                        swal("Oops", "We couldn't connect to the server!", "error");
                    }
                });
            }
        });
    }

    function showDeleteMessage() {
        $.ajax({
            type: "POST",
            url: '/Department/DeleteMessage',
            contentType: "application/json; charset=utf-8",
            dataType: "text",
            succses: function (response) {
                window.location.href = "/Delete/";
            }
        });
    }
</script>

<script>
    setTimeout(function () {
        $(".alert").alert('close');
        //....and whatever else you need to do
    }, 3000);
</script>