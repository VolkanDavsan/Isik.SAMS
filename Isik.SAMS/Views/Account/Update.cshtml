@model Isik.SAMS.Models.Entity.SAMS_Users
@{
    ViewBag.Title = "Update Account";
    Layout = "~/Views/Shared/_Layout.cshtml";
    if (Session["UserId"] != null && Session["AdminId"] == null)
    {
        Response.Redirect("/Home/Index");
    }
    else if (Session["UserId"] == null && Session["AdminId"] == null)
    {
        Response.Redirect("/Login/Index");
    }
}

@using (Html.BeginForm("Update", "Account", FormMethod.Post, new Dictionary<string, object>() {
    { "class", "form-horizontal" },
    { "role", "form" },
    { "id", "Account" },
    { "data-selector", "modalContainer" }
}))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id)

    <div class="row">
        <div class="form-group col-md-6">
            <label class="req" for="code">First Name</label>
            @Html.TextBoxFor(model => model.FirstName, new Dictionary<string, object>()
            {
                {"class", "form-control"},
                {"placeholder", "Please enter the First Name"},
                           {"required", "" },
           {"oninvalid","this.setCustomValidity('Please enter a first name.')" },
           {"oninput","this.setCustomValidity('')" }
            })
        </div>
        <div class="form-group col-md-6">
            <label class="req" for="code">Last Name</label>
            @Html.TextBoxFor(model => model.LastName, new Dictionary<string, object>()
            {
                {"class", "form-control"},
                {"placeholder", "Please enter the Last Name"},
                           {"required", "" },
           {"oninvalid","this.setCustomValidity('Please enter a last name.')" },
           {"oninput","this.setCustomValidity('')" }
            })
        </div>
        <div class="form-group col-md-6">
            <label class="req" for="code">Email</label>
            @Html.TextBoxFor(model => model.Email, new Dictionary<string, object>()
            {
                {"class", "form-control"},
                {"placeholder", "Please enter the e-mail."},
                           {"required", "" },
           {"oninvalid","this.setCustomValidity('Please enter an e-mail.')" },
           {"oninput","this.setCustomValidity('')" }
            })
        </div>
        <div class="form-group col-md-6">
            <label class="req" for="code">Phone Number</label>
            @Html.TextBoxFor(model => model.PhoneNumber, new Dictionary<string, object>()
            {
                {"class", "form-control"},
                {"placeholder", "Please enter the Phone Number"},
                {"type", "number" },
                           {"required", "" },
           {"oninvalid","this.setCustomValidity('Please enter a phone number.')" },
           {"oninput","this.setCustomValidity('')" }
            })
        </div>

        <div class="form-group col-md-6">
            <label class="req" for="code">User Type</label>
            <div class="form-check" style="margin-top:20px" onload="onload()">
                @Html.RadioButtonFor(model => model.UserType, "2", new { @id = "rbHoD", @onclick = "showHideProgram()", @class = "pull-right" })
                <label for="rbHoD">Head of Department</label>
                <br />
                @Html.RadioButtonFor(model => model.UserType, "1", new { @id = "rbSec", @onclick = "showHideProgram()", @class = "pull-right" })
                <label for="rbSec" style="margin-top:20px">Secretary</label>
            </div>
        </div>
        <div class="form-group col-md-6" id="ddlDepartment">
            <label class="req" for="code">Department</label>
            @Html.DropDownListFor(model => model.DepartmentId, ViewBag.Departments as SelectList, new { @class = "form-control" })
        </div>
        <div class="form-group col-md-6" id="ddlProgram" style="display:none">
            <label class="req" for="code">Program</label>
            @Html.DropDownListFor(model => model.ProgramId, ViewBag.Programs as SelectList, new { @class = "form-control" })
        </div>
        <div class="form-group col-md-6" id="password" style="display:none">
            <label class="req" for="code">Password</label>
            @Html.PasswordFor(model => model.Password, new Dictionary<string, object>()
            {
                {"class", "form-control"},
                {"placeholder", "Please enter the Password"},
           {"id", "pswd" },
           {"oninvalid","this.setCustomValidity('Please enter the password.')" },
           {"oninput","this.setCustomValidity('')" }
            })
        </div>
        <div class="form-group col-md-6" id="confirmPassword" style="display:none">
            <label class="req" for="code">Confirm Password</label>
            @Html.PasswordFor(model => model.ConfirmPassword, new Dictionary<string, object>()
            {
                {"class", "form-control"},
                {"placeholder", "Please enter the password again."},
           {"id", "pswd1" },
           {"oninvalid","this.setCustomValidity('Please enter the password.')" },
           {"oninput","this.setCustomValidity('')" }
            })
        </div>

    </div>
    <div class="buttons">
        <button class="btn btn-md btn-danger pull-left" data-dismiss="modal">Close</button>
        <div style="position: absolute; left:42.5%; bottom:8%">
            <a id="changePassword" onclick="changePassword()">Change Password</a>
        </div>
        <button class="btn btn-md btn-success pull-right" type="submit" OnClick="">Save</button>
    </div>
    <script type="text/javascript">

        function changePassword() {
            debugger;
            var passwords = document.getElementById("password");
            var changePassword = document.getElementById("confirmPassword");            
            if (passwords.style.display == "block") {
                document.getElementById("pswd").removeAttribute('required');
                document.getElementById("pswd1").removeAttribute('required');
                document.getElementById("pswd1").value = "";
                document.getElementById("pswd").value = "";
                passwords.style.display = "none";
                changePassword.style.display = "none";
            } else {
                document.getElementById("pswd1").setAttribute('required', '');
                document.getElementById("pswd").setAttribute('required', '')
                passwords.style.display = "block";
                changePassword.style.display = "block";
            }
        }

        $(window).load(function () {
            var element = document.getElementById("ddlProgram");
            var rbSec = document.getElementById("rbSec");
            element.style.display = rbSec.checked ? "none" : "block";
        });

        //window.onload = function onload() {
        //    var element = document.getElementById("ddlProgram");
        //    var rbHoD = document.getElementById("rbHoD");
        //    element.style.display = rbHoD.checked ? "none" : "block";
        //}

        function showHideProgram() {
            var element = document.getElementById("ddlProgram");
            var rbHoD = document.getElementById("rbHoD");
            element.style.display = rbHoD.checked ? "none" : "block";
        }
    </script>
}


